# Transfer operations
MOV_CH_{AH,AL,BH,BL,TAL,TD}
MOV_CL_{AH,AL,BH,BL,TAL,TD}
MOV_DH_{AH,AL,BH,BL,TAL,TD}
MOV_DL_{AH,AL,BH,BL,TAL,TD}

# Push $data onto stack
PUSH $data  ** TD **
# Push {reg} onto stack
PUSH_{CH,CL,DH,DL}
# Peek/Pop into {reg}
{PEEK,POP}_{AH,AL,BH,BL,CH,CL,DH,DL,TAL,TD}

# To MOV or PUSH from AH,AL,BH,BL to another register
# or the stack, use an ALUOP_{reg} or ALUOP_PUSH operation
# with the desired A/B register as the source configured
# in the ALU op.

# Store $data at @addr
ST @addr $data  ** TAH TAL TD **

# Store {reg} at @addr
ST_{CH,CL,DH,DL,TD} @addr   ** TAH TAL **

# Load RAM@addr into {reg}
LD_{AH,AL,BH,BL,CH,CL,DH,DL,TD} @addr   ** TAH TAL **

# Load @word into {reg}
LDI_{A,B,C,D} @word
# Load $byte into {reg}
LDI_{AH,AL,BH,BL,CH,CL,DH,DL,TAL,TD} $byte

# Load RAM@{addr_reg} into {reg}
LDA_A_{BH,BL,CH,CL,DH,DL,TAL,TD}
LDA_B_{AH,AL,CH,CL,DH,DL,TAL,TD}
LDA_C_{AH,AL,BH,BL,TAL,TD}
LDA_D_{AH,AL,BH,BL,TAL,TD}

# Store into RAM@{addr_reg} from {reg}
STA_A_{CH,CL,DH,DL,TAL,TD}  ** TAH TAL **
STA_B_{CH,CL,DH,DL,TAL,TD}
STA_C_{DH,DL,TD}
STA_D_{CH,CL,TD}

# Jumps - all also have _D variant
JMP @addr   ** TD **
JEQ @addr   ** TD **
JNE @addr   ** TD **
JZ @addr    ** TD **
JNZ @addr   ** TD **
JO @addr    ** TD **
JNO @addr   ** TD **

JMP_D @addr
JEQ_D @addr
JNE_D @addr
JZ_D @addr
JNZ_D @addr
JO_D @addr
JNO_D @addr

# ALU operations
ALUOP_FLAGS $op
ALUOP_PUSH $op
ALUOP_ADDR $op @addr    ** TAH TAL **
# Store ALU result into RAM@{addr_reg}
ALUOP_ADDR_{A,B,C,D} $op
# Store ALU result into {reg}
ALUOP_{AH,AL,BH,BL,CH,CL,DH,DL,TAL,TD} $op

# General purpose
NOP
HLT
CALL @addr  ** TAL TD **
RET
IRQ
RETI
MASKINT
UMASKINT
INCR_C
DECR_C
INCR_D
DECR_D

# Use PERIPH_* inside interrupt vector to figure
# out which peripheral triggered the interrupt,
# and to also know the base address of that
# peripheral's RAM address space
PERIPH_{AH,BH,CH,DH}

# Timer rates
0x0 1/2 sec
0x1 1/4 sec
0x2 1/8 sec
0x3 1/16 sec
0x4 1/32 sec
0x5 1/64 sec
0x6 1/128 sec
0x7 1/256 sec

# Memory ranges
0x0000 - 0x3eff program data (ROM)
0x3f00 - 0x3fff interrupt vector (ROM)
0x4000 - 0x4eff framebuffer chars
0x4f00 - 0x4fff hidden framebuffer (global vars)
0x5000 - 0x5eff framebuffer color
0x5f00 - 0x5fff hidden framebuffer (global vars)
0x6000 - 0xbeff RAM
0xbf00 - 0xbfff stack
0xc000 - 0xc7ff peripheral 0
0xc800 - 0xcfff peripheral 1
0xd000 - 0xd7ff peripheral 2
0xd800 - 0xdfff peripheral 3
0xe000 - 0xe7ff peripheral 4
0xe800 - 0xefff peripheral 5
0xf000 - 0xf7ff peripheral 6
0xf800 - 0xffff peripheral 7
