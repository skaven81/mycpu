# Variable declaration
VAR global {byte,word,num_bytes} $name

# Transfer operations
MOV_CH_{AH,AL,BH,BL,TAL,TD}
MOV_CL_{AH,AL,BH,BL,TAL,TD}
MOV_DH_{AH,AL,BH,BL,TAL,TD}
MOV_DL_{AH,AL,BH,BL,TAL,TD}

# Push $data onto stack
PUSH $data  ** TD **
# Push {reg} onto stack
PUSH_{CH,CL,DH,DL}
# Peek/Pop into {reg}
{PEEK,POP}_{AH,AL,BH,BL,CH,CL,DH,DL,TAL,TD}

# To MOV or PUSH from AH,AL,BH,BL to another register
# or the stack, use an ALUOP_{reg} or ALUOP_PUSH operation
# with the desired A/B register as the source configured
# in the ALU op.

# Store $data at @addr
ST @addr $data  ** TAH TAL TD **
ST_SLOW @addr $data ** TAH TAL TD **
# Store the top byte on the stack at @addr
ST_SLOW_POP @addr ** TAH TAL TD **

# Store 16-bit @data at @addr (overwrites D reg)
ST16 @addr @data ** TD **

# Store {reg} at @addr
ST_{CH,CL,DH,DL,TD} @addr   ** TAH TAL **

# Store into RAM@{addr_reg} from {reg}
STA_A_{CH,CL,DH,DL,TAL,TD}  ** TAH TAL **
STA_B_{CH,CL,DH,DL,TAL,TD}
STA_C_{DH,DL,TD}
STA_D_{CH,CL,TD}
# Store into RAM@{addr_reg} from top of stack
STA_{A,B,C,D}_SLOW_POP

# Load RAM@addr into {reg}
LD_{AH,AL,BH,BL,CH,CL,DH,DL,TD} @addr   ** TAH TAL **
LD_SLOW_PUSH @addr ** TAH TAL TD **

# Load 16-bit word at @addr into A or B. Use separate
# LD_* instructions for C and D.  LD16 takes 10 clocks;
# LD takes 5, so there is no performance difference.
LD16_{A,B} @addr

# Load @word into {reg}
LDI_{A,B,C,D} @word
# Load $byte into {reg}
LDI_{AH,AL,BH,BL,CH,CL,DH,DL,TAL,TD} $byte

# Load RAM@{addr_reg} into {reg}
LDA_A_{BH,BL,CH,CL,DH,DL,TAL,TD}
LDA_B_{AH,AL,CH,CL,DH,DL,TAL,TD}
LDA_C_{AH,AL,BH,BL,TAL,TD}
LDA_D_{AH,AL,BH,BL,TAL,TD}
# Load RAM@{addr_reg} onto the stack
LDA_{A,B,C,D}_SLOW_PUSH

# Jumps to fixed address
JMP @addr   ** TD **
JEQ @addr   ** TD **
JNE @addr   ** TD **
JZ @addr    ** TD **
JNZ @addr   ** TD **
JO @addr    ** TD **
JNO @addr   ** TD **

# Jumps to address in D register
JMP_D
JEQ_D
JNE_D
JZ_D
JNZ_D
JO_D
JNO_D

# ALU operations
ALUOP_FLAGS $op
ALUOP_PUSH $op
ALUOP_PUSH_SLOW $op
ALUOP_ADDR $op @addr    ** TAH TAL **
ALUOP_ADDR_SLOW $op @addr ** TAH TAL **
# Store ALU result into RAM@{addr_reg}
ALUOP_ADDR_{A,B,C,D} $op
# Store ALU result into {reg}
ALUOP_{AH,AL,BH,BL,CH,CL,DH,DL,TAL,TD} $op

# SIMD and atomic copy instructions
MEMCPY_C_D          ** TD ** (C and D are incremented after copy)
MEMCPY4_C_D         ** TD ** (C and D are incremented after copy)
MEMFILL4_C_DL       ** TD ** (C is incremented after write)
MEMFILL4_C_PEEK     ** TD ** (C is incremented after write)
MEMFILL4_C_I $byte  ** TD ** (C is incremented after write)

# General purpose
NOP
HLT
CALL @addr  ** TAL TD **
CALL_D - call to address in D register
RET
IRQ
RETI
MASKINT
UMASKINT
INCR_C
DECR_C
INCR_D
DECR_D

# Load the IRQ base address into a register
IRQBASE_{AH,AL,BH,BL,CH,CL,DH,DL}
# Load the IRQ ID (shifted left one) into a register
IRQID_{AH,AL,BH,BL,CH,CL,DH,DL}
# Load the contents of the status register into a register
STATUS_{AH,AL,BH,BL,CH,CL,DH,DL}

# Color byte masks
0x03 blue   xx xx xx 11
0x0c green  xx xx 11 xx
0x30 red    xx 11 xx xx
0x40 cursor x1 xx xx xx
0x80 blink  1x xx xx xx

# :print color codes
@[shade:0-3][color:0-7] = 0=black 1=blue 2=green 3=cyan 4=red 5=magenta 6=yellow 7=white
@x[hex] = color byte
@b/@B = blink off/on
@c/@C = cursor off/on
@r = reset

# :printf codes
%% - a literal percent sign
%c - a byte formatted as ASCII (the raw byte is just inserted into the target string)
%2 - a byte formatted as binary 1s and 0s
%b - a BCD byte formatted as decimal, one digit per byte (first four bits are ignored)
%B - a BCD byte formatted as decimal, two digits per byte
%x - a byte formatted as hex
%X - a byte formatted as hex, with capital letters
%u - a byte formatted as unsigned decimal (0-255)
%U - a word formatted as unsigned decimal (0-65535)
%d - a byte formatted as a signed decimal (-128-127)
%D - a word formatted as a signed decimal (-32768-32767)
%s - a word used as a pointer to a null-terminated string, which is copied into the formatted string

# Memory ranges
0x0000 - 0x3eff program data (ROM)
0x4000 - 0x4eff framebuffer chars
0x4f00 - 0x4fff hidden framebuffer (global asm vars)
0x5000 - 0x5eff framebuffer color
0x5f00 - 0x5f0f interrupt addresses
0x5f10 - 0x5fff hidden framebuffer (global asm vars)
0x6000 - 0xafff ~20k RAM (see lib/malloc.asm)
0xb000 - 0xb9ff 2.5k global asm arrays
0xba00 - 0xbcff 768b heap (lib/heap.asm)
0xbd00 - 0xbdff 256b UART buffer (lib/uart.asm)
0xbe00 - 0xbeff 256b keyboard buffer (lib/keyboard.asm)
0xbf00 - 0xbfff 256b CPU stack
0xc000 - 0xcfff peripherals
0xd000 - 0xdfff ext RAM D-page window (4k)
0xe000 - 0xefff ext RAM E-page window (4k)
0xf000 - 0xfffe unallocated
         0xffff reserved (idle bus) 

0xc000 - 0xc07f keyboard
    0xc000 keyboard key
    0xc001 keyboard flags
0xc080 - 0xc0ff timer
    0xc080 seconds
    0xc081 minutes
    0xc082 hours
    0xc083 day
    0xc084 date
    0xc085 ctrl_c / month
    0xc086 year
    0xc087 century
    0xc088 alarm sec
    0xc089 alarm min
    0xc08a alarm hour
    0xc08b alarm day/date
    0xc08c watchdog subsec
    0xc08d watchdog sec
    0xc08e ctrl_a
    0xc08f ctrl_b
    0xc090 sram addr
    0xc093 sram data
0xc100 - 0xc1ff UART
    0xc100 - transmitter buffer register (write) / receiver buffer register (read)
    0xc101 - UART control register (write) / UART status register (read)
    0xc102 - Modem control register (write/read)
    0xc103 - Bit rate select register (write) / modem status register (read)
0xc200 - 0xc2ff extended RAM control
    0xc2x0 (any even 0xc2) - Page address for 0xdxxx
    0xc2x1 (any odd 0xc2)  - Page address for 0xexxx

# Extended memory zero-page allocation
0x000 - 0x7ff malloc ledger


# Interrupt handling
When CPU comes out of reset, IRQMASK will be set.  In order to take advantage
of interrupts, IRQ handler addresses must be loaded into the following memory
locations.  The first byte is 0x5f, the second byte is the IRQ number, shifted
left one place (so a 16-bit address can be placed at each location):

 * IRQ0 0x5f00
 * IRQ1 0x5f02 - keyboard
 * IRQ2 0x5f04
 * IRQ3 0x5f06 - timer
 * IRQ4 0x5f08 - UART modem interrupt
 * IRQ5 0x5f0a - UART data ready
 * IRQ6 0x5f0c
 * IRQ7 0x5f0e

The IRQ opcode saves the PC onto the stack, then loads 0x5f into DH and the
IRQ ID (shifted left) into DL.  This address is loaded into PCH.  Then D is
incremented and that address is loaded into PCL and the CPU begins executing
at that new address.

The interrupt handler calls RETI when it is done, instead of the usual RET.

The interrupt handler is responsible for leaving the CPU in the same state
as when it was called.

# Keyboard flags
BREAK       0x01 (as in, make/break the keystroke)
CTRL        0x02
ALT         0x04
FUNC        0x08
SHIFT       0x10
NUMLOCK     0x20
CAPSLOCK    0x40
SCROLLLOCK  0x80

# Notable keyboard mappings
HOME        0x02
LeftGui     0x03
RightGui    0x03
Menu        0x04
BS          0x08
TAB         0x09
PgUp        0x0b
PgDn        0x0c
ENTER       0x0d
INS         0x0f
Pause       0x10
DownArrow   0x11
UpArrow     0x12
LeftArrow   0x13
RightArrow  0x14
PrtScrn     0x17
ESC         0x1b
END         0x1e
DEL         0x7f
